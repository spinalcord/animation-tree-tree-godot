# spinalcord
# https://github.com/spinalcord/animation-tree-tree-godot
# 
# This file is part of animation-tree-tree-godot.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public.
#
# NOTE: The output generated by this addon is not affected by this license.

# plugin.gd - Refactored with AnimationTreeBuilder
@tool
class_name AnimationTreeTree
extends EditorPlugin

var dock: Control
var clipboard_manager: ClipboardManager
var feedback: FeedbackDialog

static var config_name: String = ".env"
static var config_path: String
static var config_path_with_filename: String
static var plugin_path: String
static var plugin_config: ConfigFile = ConfigFile.new()


func _enter_tree() -> void:
	config_path =  get_script().resource_path.get_base_dir() + "/configs/" 
	plugin_path =  get_script().resource_path.get_base_dir() + "/" 
	config_path_with_filename = config_path + config_name
	
	# Initialize managers
	clipboard_manager = ClipboardManager.new()
	feedback = FeedbackDialog.new()
	# Add dock
	dock = AnimationTreeDock.new()
	add_control_to_dock(DOCK_SLOT_LEFT_UL, dock)
	
	# Connect signals
	dock.copy_requested.connect(_on_copy_requested)
	dock.paste_requested.connect(_on_paste_requested)
	dock.delete_requested.connect(_on_delete_requested)
	dock.merge_requested.connect(_on_merge_requested)
	scene_changed.connect(_on_scene_changed)

# SIMPLIFIED: Merge now uses AnimationTreeBuilder
func _on_merge_requested(animation_tree: AnimationTree, node_paths: Array[String]) -> void:
	var dialog = ConfirmationDialog.new()
	var node_count = node_paths.size()
	dialog.dialog_text = "Merge " + str(node_count) + " nodes into a new StateMachine?"
	dialog.title = "Confirm Merge"
	dialog.dialog_autowrap = true
	
	var main_screen = EditorInterface.get_editor_main_screen()
	if is_instance_valid(main_screen):
		main_screen.add_child(dialog)
		dialog.popup_centered(Vector2i(400, 150))
		
		await dialog.confirmed
		
		if is_instance_valid(dialog):
			dialog.queue_free()
		
		# SIMPLIFIED: Use AnimationTreeBuilder instead of MergeManager
		var builder = AnimationTreeBuilder.new(animation_tree)
		if builder.merge_nodes(node_paths, "MergedStateMachine"):
			TreeDebug.msg(
				"Merged %d nodes into 'MergedStateMachine'" % [node_count],
				true
			)
			call_deferred("_update_dock_tree_safely")
			EditorInterface.mark_scene_as_unsaved()

#  Delete uses AnimationTreeBuilder
func _on_delete_requested(animation_tree: AnimationTree, node_paths: Array[String]) -> void:
	var dialog = ConfirmationDialog.new()
	var node_count = node_paths.size()
	dialog.dialog_text = "Delete this node?" if node_count == 1 else "Delete these " + str(node_count) + " nodes?"
	
	var main_screen = EditorInterface.get_editor_main_screen()
	if is_instance_valid(main_screen):
		main_screen.add_child(dialog)
		dialog.popup_centered()
		
		await dialog.confirmed
		
		if is_instance_valid(dialog):
			dialog.queue_free()
		
		# SIMPLIFIED: Use AnimationTreeBuilder instead of NodeManager
		var builder = AnimationTreeBuilder.new(animation_tree)
		if builder.delete_nodes(node_paths):
			call_deferred("_update_dock_tree_safely")
			EditorInterface.mark_scene_as_unsaved()

# KEEP: ClipboardManager has specialized logic (positions, transitions, multi-node handling)
func _on_copy_requested(animation_tree: AnimationTree, node_paths: Array[String]) -> void:
	var result = clipboard_manager.copy_nodes(animation_tree, node_paths)
	if result.success and is_instance_valid(dock):
		dock._update_clipboard_status(true, result.display_types, result.source_tree, result.first_node_name)

# KEEP: ClipboardManager has specialized paste logic
func _on_paste_requested(animation_tree: AnimationTree, target_path: String) -> void:
	var result = clipboard_manager.paste_nodes(animation_tree, target_path)
	if result.pasted_count > 0:
		call_deferred("_update_dock_tree_safely")
		EditorInterface.mark_scene_as_unsaved()

func _on_scene_changed(scene_root: Node) -> void:
	if is_instance_valid(dock):
		call_deferred("_refresh_dock_safely")

func _refresh_dock_safely() -> void:
	if is_instance_valid(dock) and dock.get_parent():
		dock._refresh_tree_view()

func _exit_tree() -> void:
	if is_instance_valid(dock) and dock.get_parent():
		remove_control_from_docks(dock)
	dock = null

func _update_dock_tree_safely() -> void:
	if is_instance_valid(dock) and dock.get_parent():
		dock.update_tree_view_after_operation()

func get_clipboard_status() -> Dictionary:
	return clipboard_manager.get_status()


# ============================================================================
# OPTIONAL: Additional features you could add using AnimationTreeBuilder
# ============================================================================

# NEW: Quick rename feature using builder
func _on_rename_requested(animation_tree: AnimationTree, node_path: String) -> void:
	var current_name = node_path.substr(node_path.rfind("/") + 1) if node_path.contains("/") else node_path
	
	# Use existing feedback.show_text() method
	var new_name = await feedback.show_text("Enter new name:", "Rename Node", current_name)
	
	# Empty string means cancel was pressed
	if not new_name.is_empty():
		var builder = AnimationTreeBuilder.new(animation_tree)
		if builder.rename_node(node_path, new_name):
			feedback.show_info("Renamed to: " + new_name, "Success")
			call_deferred("_update_dock_tree_safely")
			EditorInterface.mark_scene_as_unsaved()
