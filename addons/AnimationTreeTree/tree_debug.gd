# spinalcord
# https://github.com/spinalcord/animation-tree-tree-godot
# 
# This file is part of animation-tree-tree-godot.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public.
#
# NOTE: The output generated by this addon is not affected by this license.
class_name TreeDebug

# Debug control constants
const SHOW_FUNCTION = true
const SHOW_FILE = true
const SHOW_CODE_SNIPPET = true
const SHOW_LINE_NUMBERS = true
const CONTEXT_LINES_ABOVE = 6  # Number of lines to show above the current line
const CONTEXT_LINES_BELOW = 3  # Number of lines to show below the current line

static var last_file = ""

static func msg(content: String, display_as_msg_box: bool = false):
	# Return early if debug is disabled
	
	if display_as_msg_box == true:
		var _feedback: FeedbackDialog = FeedbackDialog.new()
		await _feedback.show_info(content, "AnimationTreeTree")
		return
	
	if not AnimationTreeTree.plugin_config.get_value("settings", "debug_everything", false):
		return
	
	# Get the call stack
	var stack = get_stack()
	if stack.size() > 1:
		var caller = stack[1]  # [0] is this function, [1] is the caller
		var function_name = caller["function"]
		var source_file = caller["source"]
		var line_number = caller["line"]
		
		if SHOW_FILE and last_file != source_file.get_file():
			print_rich("[color=cyan]Now we are in: %s" % [source_file.get_file()])
			last_file = source_file.get_file()
		
		if SHOW_FUNCTION: 
			print("Function: %s" % function_name)
		
		# Try to read and display code snippet
		if SHOW_CODE_SNIPPET:
			var file = FileAccess.open(source_file, FileAccess.READ)
			if file:
				var lines = file.get_as_text().split("\n")
				file.close()
				
				var start_line = max(0, line_number - CONTEXT_LINES_ABOVE - 1)
				var end_line = min(lines.size() - 1, line_number + CONTEXT_LINES_BELOW - 1)
				
				for i in range(start_line, end_line + 1):
					var prefix = "â†’ " if i == line_number - 1 else "  "
					var line_num_display = ("%4d | " % (i + 1)) if SHOW_LINE_NUMBERS else ""
					if i == line_number - 1:
						print_rich("[color=yellow]%s%s%s" % [prefix, line_num_display, lines[i]])
					else:
						print("%s%s%s" % [prefix, line_num_display, lines[i]])
				print(content)
				
		else:
			print(content)
