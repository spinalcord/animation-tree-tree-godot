# spinalcord
# https://github.com/spinalcord/animation-tree-tree-godot
# 
# This file is part of animation-tree-tree-godot.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public.
#
# NOTE: The output generated by this addon is not affected by this license.

# StateManager handles tree state preservation
class_name StateManager
func capture_tree_state(tree_view: Tree) -> Dictionary:
	var state: Dictionary = {
		"selected_path": "",
		"expanded_paths": []
	}
	
	var selected_item: TreeItem = tree_view.get_selected()
	if selected_item:
		state.selected_path = MetadataUtils.get_path_from_metadata(selected_item.get_metadata(0))
	
	var root_item: TreeItem = tree_view.get_root()
	if root_item:
		_collect_expanded_items(root_item, state.expanded_paths as Array)
	
	TreeDebug.msg("Captured tree state - expanded: %s" % str(state.expanded_paths))
	return state

func restore_tree_state(tree_view: Tree, state: Dictionary) -> void:
	var expanded_paths := state.expanded_paths as Array
	if expanded_paths.size() > 0:
		_restore_expanded_items(tree_view.get_root(), expanded_paths)
		TreeDebug.msg("Restored expanded states")
	
	var selected_path := state.selected_path as String
	if not selected_path.is_empty():
		_select_item_by_path(tree_view.get_root(), selected_path)

func _collect_expanded_items(item: TreeItem, expanded_paths: Array) -> void:
	if not item.is_collapsed() and item.get_parent() != null:
		var path = MetadataUtils.get_path_from_metadata(item.get_metadata(0))
		if not path.is_empty():
			expanded_paths.append(path)
			TreeDebug.msg("Found expanded item: %s" % path)
	
	TreeUtils.process_tree_children(item, func(child: TreeItem): _collect_expanded_items(child, expanded_paths))

func _restore_expanded_items(item: TreeItem, expanded_paths: Array) -> void:
	var item_path = MetadataUtils.get_path_from_metadata(item.get_metadata(0))
	
	if not item_path.is_empty() and item_path in expanded_paths:
		item.set_collapsed(false)
		TreeDebug.msg("Restored expanded state for: %s" % item_path)
	elif item.get_parent() != null:
		item.set_collapsed(true)
	
	TreeUtils.process_tree_children(item, func(child: TreeItem): _restore_expanded_items(child, expanded_paths))

func _select_item_by_path(item: TreeItem, target_path: String) -> bool:
	var item_path = MetadataUtils.get_path_from_metadata(item.get_metadata(0))
	
	if item_path == target_path:
		item.select(0)
		return true
	
	return TreeUtils.search_tree_children(item, func(child: TreeItem) -> bool: return _select_item_by_path(child, target_path))
