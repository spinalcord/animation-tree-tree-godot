# spinalcord
# https://github.com/spinalcord/animation-tree-tree-godot
# 
# This file is part of animation-tree-tree-godot.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public.
#
# NOTE: The output generated by this addon is not affected by this license.

# UIManager handles all UI creation and styling
class_name UIManager
const TITLE_FONT_SIZE: int = 14
const INSTRUCTION_FONT_SIZE: int = 10

func create_dock_ui(button_config: Array) -> Dictionary:
	var main_container = VBoxContainer.new()
	main_container.set_anchors_and_offsets_preset(Control.PRESET_FULL_RECT)
	
	var components = {}
	
	components.status_label = _create_status_section(main_container)
	_add_separator(main_container)
	components.clipboard_status_label = _create_clipboard_section(main_container)
	_add_separator(main_container)
	components.path_label = _create_path_section(main_container)
	components.buttons = _create_buttons_section(main_container, button_config)
	_add_separator(main_container)
	components.tree_view = _create_tree_section(main_container)
	components.main_container = main_container

	return components

func _create_status_section(container: VBoxContainer) -> Label:
	var status_label = Label.new()
	status_label.text = "No AnimationTree selected"
	status_label.modulate = Color.YELLOW
	status_label.autowrap_mode = TextServer.AUTOWRAP_WORD
	container.add_child(status_label)
	return status_label

func _create_clipboard_section(container: VBoxContainer) -> Label:
	var clipboard_label = Label.new()
	clipboard_label.text = "Clipboard Status:"
	clipboard_label.autowrap_mode = TextServer.AUTOWRAP_WORD
	container.add_child(clipboard_label)
	
	var clipboard_status_label = Label.new()
	clipboard_status_label.text = "Empty clipboard"
	clipboard_status_label.modulate = Color.GRAY
	clipboard_status_label.autowrap_mode = TextServer.AUTOWRAP_WORD
	clipboard_status_label.add_theme_font_size_override("font_size", 11)
	container.add_child(clipboard_status_label)
	return clipboard_status_label

func _create_path_section(container: VBoxContainer) -> Label:
	var path_display_label = Label.new()
	path_display_label.text = "Selected Node Path:"
	container.add_child(path_display_label)
	
	var path_label = Label.new()
	path_label.text = "No selection"
	path_label.modulate = Color.GRAY
	path_label.autowrap_mode = TextServer.AUTOWRAP_WORD
	container.add_child(path_label)
	return path_label

func _create_buttons_section(container: VBoxContainer, button_config: Array) -> Dictionary:
	var button_container = FlowContainer.new()
	button_container.alignment = FlowContainer.ALIGNMENT_BEGIN
	container.add_child(button_container)
	
	var editor_theme = EditorInterface.get_editor_theme()
	var buttons = {}
	
	# Create buttons from configuration
	for config in button_config:
		var button = Button.new()
		button.icon = editor_theme.get_icon(config.icon, "EditorIcons")
		button.tooltip_text = config.tooltip
		button.disabled = config.disabled
		
		# Connect signal directly with Callable
		button.pressed.connect(config.handler)
		
		button_container.add_child(button)
		buttons[config.name] = button
	
	return buttons

func _create_tree_section(container: VBoxContainer) -> Tree:
	var tree_label = Label.new()
	tree_label.text = "Animation Tree Structure:"
	container.add_child(tree_label)
	
	var tree_view = Tree.new()
	tree_view.select_mode = Tree.SELECT_MULTI
	tree_view.size_flags_vertical = Control.SIZE_EXPAND_FILL
	container.add_child(tree_view)
	return tree_view

func _add_separator(container: VBoxContainer) -> void:
	container.add_child(HSeparator.new())

func set_status(label: Label, text: String, color: Color) -> void:
	label.text = text
	label.modulate = color

func set_path_display(label: Label, text: String, color: Color) -> void:
	label.text = text
	label.modulate = color

func enable_controls(buttons: Array, enabled: bool) -> void:
	for button in buttons:
		if is_instance_valid(button):
			button.disabled = not enabled

func update_clipboard_status(label: Label, paste_button: Button, has_content: bool, node_type: String, source_tree_name: String, node_name: String, has_tree: bool) -> void:
	if has_content:
		label.text = "Copied: %s (%s) from '%s'" % [node_name, node_type, source_tree_name]
		label.modulate = Color.GREEN
		paste_button.disabled = not has_tree
	else:
		label.text = "Empty clipboard"
		label.modulate = Color.GRAY
		paste_button.disabled = true
