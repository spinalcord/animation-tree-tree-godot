# spinalcord
# https://github.com/spinalcord/animation-tree-tree-godot
# 
# This file is part of animation-tree-tree-godot.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public.
#
# NOTE: The output generated by this addon is not affected by this license.

class_name ConfigDialog
extends RefCounted

signal dialog_result(result: bool)

var config_path: String
var fields: Array[ConfigField]
var config_file: ConfigFile
var controls_map: Dictionary = {}
var current_dialog: AcceptDialog

func _init(_config_name: String, _fields: Array[ConfigField]):
	fields = _fields
	config_file = ConfigFile.new()
	config_path = AnimationTreeTree.config_path + _config_name
	
	_load_config()

func _load_config() -> void:
	var error = config_file.load(config_path)
	
	if error != OK:
		TreeDebug.msg("Config file not found, using defaults")
		# Initialize with defaults
		for field in fields:
			_set_default_value(field)
	else:
		TreeDebug.msg("Config loaded successfully")
		# Load existing values, use defaults for missing fields
		for field in fields:
			if not config_file.has_section_key("settings", field.key):
				_set_default_value(field)

func _set_default_value(field: ConfigField) -> void:
	var default_val
	
	match field.field_type:
		"bool":
			default_val = field.default_value if typeof(field.default_value) == TYPE_BOOL else false
		"int":
			if field.default_value is Array and field.default_value.size() >= 2:
				default_val = field.default_value[1] # Default value is second element
			else:
				default_val = 0
		"float":
			if field.default_value is Array and field.default_value.size() >= 3:
				default_val = field.default_value[2] # Default value is third element
			else:
				default_val = 0.0
		"string", "string_multi":
			default_val = field.default_value if typeof(field.default_value) == TYPE_STRING else ""
		"combo_box":
			if field.default_value is Array and field.default_value.size() > 0:
				default_val = field.default_value[0]
			else:
				default_val = ""
		"pick":
			# Find the first true value or use the first key
			if field.default_value is Dictionary:
				for key in field.default_value.keys():
					if field.default_value[key]:
						default_val = key
						break
				if default_val == null and field.default_value.size() > 0:
					default_val = field.default_value.keys()[0]
			else:
				default_val = ""
		"decision":
			default_val = field.default_value if field.default_value is Dictionary else {}
		_:
			default_val = field.default_value
	
	config_file.set_value("settings", field.key, default_val)

func _save_config() -> bool:
	var error = config_file.save(config_path)
	
	if error == OK:
		TreeDebug.msg("Config saved successfully")
		return true
	else:
		TreeDebug.msg("Failed to save config: " + str(error))
		return false

func get_value(key: String, default_value = null):
	return config_file.get_value("settings", key, default_value)

func show() -> bool:
	# Create AcceptDialog instance
	var dialog = AcceptDialog.new()
	dialog.title = "Settings"
	dialog.add_cancel_button("Cancel")

	current_dialog = dialog
	
	# Create main container
	var main_container = VBoxContainer.new()
	main_container.custom_minimum_size = Vector2(600, 400)
	
	# Create TabContainer
	var tab_container = TabContainer.new()
	tab_container.size_flags_vertical = Control.SIZE_EXPAND_FILL
	
	# Group fields by tab
	var tabs_dict: Dictionary = {}
	for field in fields:
		if not tabs_dict.has(field.tab_name):
			tabs_dict[field.tab_name] = []
		tabs_dict[field.tab_name].append(field)
	
	# Create tabs
	for tab_name in tabs_dict.keys():
		var tab_content = ScrollContainer.new()
		tab_content.name = tab_name
		
		var vbox = VBoxContainer.new()
		vbox.size_flags_horizontal = Control.SIZE_EXPAND_FILL
		
		# Add fields to tab
		for field in tabs_dict[tab_name]:
			_create_field_control(field, vbox)
		
		tab_content.add_child(vbox)
		tab_container.add_child(tab_content)
	
	main_container.add_child(tab_container)
	dialog.add_child(main_container)
	
	# Add dialog to scene tree
	EditorInterface.get_base_control().add_child(dialog)
	
	TreeDebug.msg("Showing config dialog")
	
	# Connect signals with one-shot
	dialog.confirmed.connect(func():
		_save_values_from_controls()
		var saved = _save_config()
		dialog_result.emit(saved)
	, CONNECT_ONE_SHOT)
	
	dialog.canceled.connect(func():
		dialog_result.emit(false)
	, CONNECT_ONE_SHOT)
	
	# Center and show dialog
	dialog.popup_centered()
	
	# Wait for result
	var result = await dialog_result
	
	# Hide and cleanup
	dialog.hide()
	dialog.call_deferred("queue_free")
	
	return result

func _create_field_control(field: ConfigField, parent: VBoxContainer) -> void:
	# Skip callable type in the field creation
	if field.field_type == "callable":
		_create_callable_field(field, parent)
		return
	
	# Skip callout type in the field creation
	if field.field_type == "callout":
		_create_callout_field(field, parent)
		return
	
	# Create horizontal container for label and control
	var hbox = HBoxContainer.new()
	hbox.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	
	# Create label
	var label = Label.new()
	label.text = field.label_text
	label.custom_minimum_size.x = 200
	hbox.add_child(label)
	
	# Create control based on type
	var control: Control
	
	match field.field_type:
		"bool":
			control = _create_bool_control(field)
		"int":
			control = _create_int_control(field)
		"float":
			control = _create_float_control(field)
		"string":
			control = _create_string_control(field)
		"string_multi":
			control = _create_string_multi_control(field)
		"combo_box":
			control = _create_combo_box_control(field)
		"pick":
			control = _create_pick_control(field)
		"decision":
			control = _create_decision_control(field)
	
	if control:
		control.tooltip_text = field.description
		control.size_flags_horizontal = Control.SIZE_EXPAND_FILL
		hbox.add_child(control)
		controls_map[field.key] = control
	
	parent.add_child(hbox)

func _create_bool_control(field: ConfigField) -> CheckBox:
	var checkbox = CheckBox.new()
	checkbox.button_pressed = config_file.get_value("settings", field.key, false)
	return checkbox

func _create_int_control(field: ConfigField) -> SpinBox:
	var spinbox = SpinBox.new()
	
	if field.default_value is Array and field.default_value.size() >= 3:
		spinbox.min_value = field.default_value[0]
		spinbox.value = field.default_value[1]
		spinbox.max_value = field.default_value[2]
	else:
		spinbox.min_value = 0
		spinbox.max_value = 100
		spinbox.value = config_file.get_value("settings", field.key, 0)
	
	spinbox.step = 1
	spinbox.value = config_file.get_value("settings", field.key, spinbox.value)
	return spinbox

func _create_float_control(field: ConfigField) -> SpinBox:
	var spinbox = SpinBox.new()
	
	if field.default_value is Array and field.default_value.size() >= 4:
		spinbox.min_value = field.default_value[0]
		spinbox.step = field.default_value[1]
		spinbox.value = field.default_value[2]
		spinbox.max_value = field.default_value[3]
	else:
		spinbox.min_value = 0.0
		spinbox.max_value = 100.0
		spinbox.step = 0.1
		spinbox.value = config_file.get_value("settings", field.key, 0.0)
	
	spinbox.value = config_file.get_value("settings", field.key, spinbox.value)
	return spinbox

func _create_string_control(field: ConfigField) -> LineEdit:
	var line_edit = LineEdit.new()
	line_edit.text = config_file.get_value("settings", field.key, field.default_value)
	return line_edit

func _create_string_multi_control(field: ConfigField) -> Button:
	var button = Button.new()
	button.text = "..."
	
	# Store current value in metadata
	button.set_meta("field_key", field.key)
	button.set_meta("current_value", config_file.get_value("settings", field.key, field.default_value))
	
	button.pressed.connect(func():
		if current_dialog:
			current_dialog.hide()
		
		var feedback = FeedbackDialog.new()
		var current_val = button.get_meta("current_value", "")
		var result = await feedback.show_text("Enter text:", field.label_text, current_val, true)
		if result != "":
			button.set_meta("current_value", result)
		
		if current_dialog:
			current_dialog.popup_centered()
	)
	
	return button

func _create_pick_control(field: ConfigField) -> Button:
	var button = Button.new()
	button.text = "..."
	
	button.set_meta("field_key", field.key)
	button.set_meta("options", field.default_value)
	button.set_meta("current_value", config_file.get_value("settings", field.key, ""))
	
	button.pressed.connect(func():
		if current_dialog:
			current_dialog.hide()
		
		var feedback = FeedbackDialog.new()
		var current_val = button.get_meta("current_value", "")
		var options: Dictionary = button.get_meta("options", {})
		
		var pick_options: Dictionary[String, bool] = {}
		for key in options.keys():
			pick_options[key] = (key == current_val)
		
		var result = await feedback.show_pick(field.description, field.label_text, pick_options)
		if result != "":
			button.set_meta("current_value", result)
		
		if current_dialog:
			current_dialog.popup_centered()
	)
	
	return button

func _create_decision_control(field: ConfigField) -> Button:
	var button = Button.new()
	button.text = "..."
	
	button.set_meta("field_key", field.key)
	button.set_meta("options", field.default_value)
	button.set_meta("current_value", config_file.get_value("settings", field.key, field.default_value))
	
	button.pressed.connect(func():
		if current_dialog:
			current_dialog.hide()
		
		var feedback = FeedbackDialog.new()
		var current_val: Dictionary = button.get_meta("current_value", {})
		var options: Dictionary = button.get_meta("options", {})
		
		var decision_options: Dictionary[String, bool] = {}
		for key in options.keys():
			if current_val.has(key):
				decision_options[key] = current_val[key]
			else:
				decision_options[key] = options[key]
		
		var result = await feedback.show_decisions(field.description, field.label_text, decision_options)
		if not result.is_empty():
			button.set_meta("current_value", result)
		
		if current_dialog:
			current_dialog.popup_centered()
	)
	
	return button
func _create_combo_box_control(field: ConfigField) -> OptionButton:
	var option_button = OptionButton.new()
	
	if field.default_value is Array:
		for item in field.default_value:
			option_button.add_item(str(item))
		
		# Set current selection
		var current_value = config_file.get_value("settings", field.key, field.default_value[0])
		var index = field.default_value.find(current_value)
		if index >= 0:
			option_button.select(index)
	
	return option_button

func _create_callable_field(field: ConfigField, parent: VBoxContainer) -> void:
	var button = Button.new()
	button.text = field.label_text
	button.tooltip_text = field.description
	
	if field.default_value is Callable:
		button.pressed.connect(field.default_value)
	
	parent.add_child(button)

func _create_callout_field(field: ConfigField, parent: VBoxContainer) -> void:
	var panel = PanelContainer.new()
	
	# Create StyleBox for background color
	var style_box = StyleBoxFlat.new()
	style_box.content_margin_left = 10
	style_box.content_margin_right = 10
	style_box.content_margin_top = 10
	style_box.content_margin_bottom = 10
	style_box.corner_radius_top_left = 5
	style_box.corner_radius_top_right = 5
	style_box.corner_radius_bottom_left = 5
	style_box.corner_radius_bottom_right = 5
	
	# Set color based on type
	match field.default_value:
		"warning":
			style_box.bg_color = Color(1.0, 0.6, 0.2, 0.3)  # Orange
		"important":
			style_box.bg_color = Color(0.2, 0.8, 0.2, 0.3)  # Green
		"error":
			style_box.bg_color = Color(1.0, 0.2, 0.2, 0.3)  # Red
		"note":
			style_box.bg_color = Color(0.5, 0.7, 1.0, 0.3)  # Baby blue
		_:
			style_box.bg_color = Color(0.0, 0.0, 0.0, 0.3)  # Default gray
	
	panel.add_theme_stylebox_override("panel", style_box)
	
	var label = Label.new()
	label.text = field.label_text
	label.tooltip_text = field.description
	label.autowrap_mode = TextServer.AUTOWRAP_WORD_SMART
	label.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	
	panel.add_child(label)
	parent.add_child(panel)

func _save_values_from_controls() -> void:
	for field in fields:
		if field.field_type == "callable" or field.field_type == "callout":
			continue
		
		if not controls_map.has(field.key):
			continue
		
		var control = controls_map[field.key]
		var value
		
		match field.field_type:
			"bool":
				value = control.button_pressed
			"int", "float":
				value = control.value
			"string":
				value = control.text
			"string_multi":
				value = control.get_meta("current_value", "")
			"combo_box":
				if field.default_value is Array:
					value = field.default_value[control.selected]
			"pick":
				value = control.get_meta("current_value", "")
			"decision":
				value = control.get_meta("current_value", {})
		
		config_file.set_value("settings", field.key, value)
