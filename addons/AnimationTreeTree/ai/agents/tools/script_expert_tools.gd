# spinalcord
# https://github.com/spinalcord/animation-tree-tree-godot
# 
# This file is part of animation-tree-tree-godot.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public.
#
# NOTE: The output generated by this addon is not affected by this license.

class_name ScriptExpertTools
extends ConAITool
# this is a tool class. An agent can use tool to enhance
# your output tools begin with tool prefix. 

## Returns Godots current scripting guidline.
func tool_get_godot_scripting_guidline() -> String:
	var file = FileAccess.open(AnimationTreeTree.plugin_path + "ai/guidline/scripting.txt", FileAccess.READ)
	
	# Check if file was opened successfully
	if file == null:
		print("Error opening guidline: ", FileAccess.get_open_error())
		return ""
	
	# Read the entire file content
	var content = file.get_as_text()
	
	# Close the file
	file.close()
	return content


## CRITICAL: IF users question is not sufficient OR you are not sure what to do, use this tool.
## Use ONLY YES/NO decisions.
## Ask: "Should I ...?" ✓
## WRONG: "Can you describe your problem?" ✗
## WRONG: "What do you want to do?" ✗
## [param questions]: Array of question strings ["Should I x?", "Do you want y?", ...]
## Returns String with user's answers or empty String if cancelled.
func tool_ask_user_decisions(questions: Array) -> String:
	# Convert questions array to dictionary format for show_decisions
	var checkboxes: Dictionary = {}
	for i in range(questions.size()):
		var key = "question_%d" % i
		checkboxes[key] = [questions[i], false]
	
	var result = await _feedback.show_decisions("Your AI-Assistant wants to clarify something:", "Assistant", checkboxes, false)
	
	# Convert dictionary result to readable string
	if result.is_empty():
		return ""
	
	var output: String = ""
	for question in result.keys():
		var answer = "YES" if result[question] else "NO"
		output += question + ": " + answer + "\n"
	print(output.strip_edges())
	return output.strip_edges()
