# spinalcord
# https://github.com/spinalcord/animation-tree-tree-godot
# 
# This file is part of animation-tree-tree-godot.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public.
#
# NOTE: The output generated by this addon is not affected by this license.

# AIManager handles AI-related operations and expert interactions
class_name ScriptGeneratorExpert extends Expert
func _init(ai_manager: AIManager) -> void:
	name = AIManager.SCRIPT_EXPERT
	manager = ai_manager

func get_config_fields() -> Array[ConfigField]:
	var fields: Array[ConfigField] = []
	
	#fields.append(ConfigField.new(
	#	"test", 
	#	"test", 
	#	"test", 
	#	"Script Generator Expert", 
	#	"bool", 
	#	true
	#))
	
	return fields

func get_system_prompt() -> String:
	return "script_generator_expert.txt"

func process(con_ai: ConAI, system_prompt: String, user_input: String) -> void:
	var script_agent: Agent = Agent.new()
	var script_expert_tools = ScriptExpertTools.new()
	
	script_agent.system_prompt = system_prompt
	
	var temp_conversation: Conversation = Conversation.new()
	await con_ai.answer(script_agent, temp_conversation, script_expert_tools, user_input)
	var llm_result = temp_conversation.get_last_message("assistant")
	
	TreeDebug.msg("LLM Result: " + str(llm_result))
	
	var all_produced_gdscripts: Array = manager._extract_block_from_markdown(llm_result, "gdscript")
	
	TreeDebug.msg("Extracted GDScript blocks: " + str(all_produced_gdscripts.size()))
	
	if all_produced_gdscripts.size() > 0:
		var first_gdscript: String = all_produced_gdscripts[0]
		await manager.feedback.show_text("Script suggestion", "Script suggestion", first_gdscript, true)
	else:
		if llm_result.strip_edges().is_empty() == false:
			await manager.feedback.show_text("Script suggestion", "Raw AI Response", llm_result, true)
