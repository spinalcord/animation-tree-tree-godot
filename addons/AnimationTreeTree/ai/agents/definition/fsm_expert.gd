# spinalcord
# https://github.com/spinalcord/animation-tree-tree-godot
# 
# This file is part of animation-tree-tree-godot.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public.
#
# NOTE: The output generated by this addon is not affected by this license.

# AIManager handles AI-related operations and expert interactions
class_name FSMExpert extends Expert

var _container:DependencyContainer
var _current_animation_tree: AnimationTree
func _init(ai_manager: AIManager, container: DependencyContainer) -> void:
	name = AIManager.FSM_EXPERT
	_container = container
	_current_animation_tree = _container.grab("CurrentAnimationTree")
	manager = ai_manager

func get_config_fields() -> Array[ConfigField]:
	var fields: Array[ConfigField] = []
	
	fields.append(ConfigField.new(
		"node_type", 
		"Allowed Node Types", 
		"Select which node types should the expert included/excluded", 
		"State Machine Expert", 
		"decision", 
		{
			"StateMachine": true,
			"BlendTree": true,
			"Animation": true,
			"Blend2": true,
			"Blend3": true,
			"BlendSpace1D": true,
			"BlendSpace2D": true,
			"TimeScale": true,
			"TimeSeek": true,
			"Transition": true
		}
	))
	
	fields.append(ConfigField.new(
		"include_excerpt", 
		"Include Expression Excerpt", 
		"Includes an excerpt of your \"Advance Expression Base Node\" attached script assigned to your AnimationTree.", 
		"State Machine Expert", 
		"bool", 
		true
	))
	
	return fields

func get_system_prompt() -> String:
	return "fsm_expert.md"

func process(con_ai: ConAI, system_prompt: String, user_input: String) -> void:
	var fsm_agent: Agent = Agent.new()
	fsm_agent.system_prompt = system_prompt
	
	var temp_conversation: Conversation = Conversation.new()
	
	var tree_view: Tree = _container.grab("TreeView")
	
	var fsm_tools
	
	# WE want the maximum best FIRST ONE-SHOT result...
	# NO TreeView children means: we don't need tools! Because tool context is very expensive and
	# can confuse the language model. This will lead to better ONE-SHOT AnimationTree structure results.
	if tree_view != null and tree_view.get_root() != null and tree_view.get_root().get_first_child() == null:
		fsm_tools = null
		TreeDebug.msg("No Tool Use")
	else:
		fsm_tools = FSMExpertTools.new(_container)
	
	await con_ai.answer(fsm_agent, temp_conversation, fsm_tools, user_input)
	
	var llm_result: String = temp_conversation.get_last_message("assistant")
	var all_produced_yaml: Array = manager.extract_block_from_markdown(llm_result, "yaml")
	
	if all_produced_yaml.size() > 0:
		for yaml in all_produced_yaml:
			var builder: AnimationTreeScriptBuilder = AnimationTreeScriptBuilder.new()
			print(yaml)
			
			builder.build_from_script(_current_animation_tree, yaml)
		EditorInterface.mark_scene_as_unsaved()
	else:
		# push_error("Language Model didn't generated a sufficient response: ")
		TreeDebug.msg("AI Response:" + "\n" + llm_result, true)
