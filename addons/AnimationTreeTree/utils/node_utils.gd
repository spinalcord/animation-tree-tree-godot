# spinalcord
# https://github.com/spinalcord/animation-tree-tree-godot
# 
# This file is part of animation-tree-tree-godot.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public.
#
# NOTE: The output generated by this addon is not affected by this license.

# NodeUtils.gd
# Utility functions for AnimationNode operations using native Godot 4.4 methods
class_name NodeUtils



# Get all child node names from a container using native methods
static func get_container_children(container: AnimationNode) -> Array[String]:
	var child_names: Array[String] = []
	
	if container is AnimationNodeStateMachine:
		var sm = container as AnimationNodeStateMachine
		# Use native get_node_list() method
		var node_list = sm.get_node_list()
		for node_name in node_list:
			# Exclude Start and End nodes
			if node_name != "Start" and node_name != "End":
				child_names.append(node_name)
	
	elif container is AnimationNodeBlendTree:
		var bt = container as AnimationNodeBlendTree
		# For BlendTree, iterate over properties to find nodes
		var properties: Array[Dictionary] = bt.get_property_list()
		for prop in properties:
			if prop.name.begins_with("nodes/") and prop.name.ends_with("/node"):
				var node_name = prop.name.trim_prefix("nodes/").trim_suffix("/node")
				# Exclude output node
				if node_name != "output":
					child_names.append(node_name)
	
	return child_names

# Get a node from a BlendTree using native method
static func get_blend_tree_node(blend_tree: AnimationNodeBlendTree, node_name: String) -> AnimationNode:
	# BlendTree has native get_node() method
	return blend_tree.get_node(node_name)

# Get node at a specific path from root using native methods
static func get_node_at_path(root: AnimationNode, path: String) -> AnimationNode:
	if not is_instance_valid(root):
		return null
	
	# Empty path or root path returns root
	if path.is_empty() or path == "/":
		return root
	
	# Split path and traverse
	var parts = path.split("/", false)  # false = don't include empty strings
	var current = root
	
	for part in parts:
		if not is_instance_valid(current):
			return null
		
		# Check if node exists first, then get it
		var next_node = null
		if current is AnimationNodeStateMachine:
			# Check existence before trying to get the node
			if not current.has_node(part):
				return null
			next_node = current.get_node(part)
		elif current is AnimationNodeBlendTree:
			# For BlendTree, try to get node (returns null if not found)
			next_node = current.get_node(part)
		elif current is AnimationNodeBlendSpace1D:
			# For BlendSpace1D, part is the blend point index
			var index = int(part)
			if index < 0 or index >= current.get_blend_point_count():
				return null
			next_node = current.get_blend_point_node(index)
		elif current is AnimationNodeBlendSpace2D:
			# For BlendSpace2D, part is the blend point index
			var index = int(part)
			if index < 0 or index >= current.get_blend_point_count():
				return null
			next_node = current.get_blend_point_node(index)
		else:
			return null
		
		if not is_instance_valid(next_node):
			return null
		
		current = next_node
	
	return current
# Get parent path from a node path (pure string manipulation)
static func get_parent_path(path: String) -> String:
	if not path.contains("/"):
		return "/"
	return path.substr(0, path.rfind("/"))

# Get node name from path (pure string manipulation)
static func get_node_name_from_path(path: String) -> String:
	if not path.contains("/"):
		return path
	return path.substr(path.rfind("/") + 1)

# Deep copy a node using native duplicate method
static func deep_copy_node(node: AnimationNode) -> AnimationNode:
	if not is_instance_valid(node):
		return null
	return node.duplicate(true)

# Check if a node exists at path using native has_node() method
static func has_node_at_path(root: AnimationNode, path: String) -> bool:
	if not is_instance_valid(root):
		return false
	
	if path.is_empty() or path == "/":
		return true
	
	var parent_path = get_parent_path(path)
	var parent = get_node_at_path(root, parent_path)
	
	if not is_instance_valid(parent):
		return false
	
	var node_name = get_node_name_from_path(path)
	
	# Use native has_node() method
	if parent is AnimationNodeStateMachine:
		return parent.has_node(node_name)
	elif parent is AnimationNodeBlendTree:
		return is_instance_valid(parent.get_node(node_name))
	
	return false

# Get node position using native get_node_position() method
static func get_node_position(container: AnimationNode, node_name: String) -> Vector2:
	if container is AnimationNodeStateMachine:
		return container.get_node_position(node_name)
	elif container is AnimationNodeBlendTree:
		return container.get_node_position(node_name)
	
	return Vector2.ZERO

# Set node position using native set_node_position() method
static func set_node_position(container: AnimationNode, node_name: String, position: Vector2) -> bool:
	if not is_instance_valid(container):
		return false
	
	if container is AnimationNodeStateMachine:
		var sm = container as AnimationNodeStateMachine
		if sm.has_node(node_name):
			sm.set_node_position(node_name, position)
			return true
	elif container is AnimationNodeBlendTree:
		container.set_node_position(node_name, position)
		return true
	
	return false
